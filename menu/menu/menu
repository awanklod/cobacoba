#!/bin/bash
white='\033[1;97m'
y='\033[1;33m' #yellow
BGX="\033[42m"
C='\033[0;96m'
c="\033[0;36m" #biruterang
z="\033[96m"
RED='\033[0;31m'
OR='\033[1;93m'
NC='\033[0m'
gray="\e[1;30m"
Blue="\033[0;34m"
green='\033[0;32m'
grenbo="\e[92;1m"
p="\033[1;95m"
YELL='\033[0;33m'
g='\033[1;92m'
gg='\e[1;77m' #ijo tebel
ISP=$(cat /etc/xray/isp)
CITY=$(cat /etc/xray/city)
IPVPS=$(curl -s ipv4.icanhazip.com)
domain=$(cat /etc/xray/domain)
RAM=$(free -m | awk 'NR==2 {print $2}')
USAGERAM=$(free -m | awk 'NR==2 {print $3}')
MEMOFREE=$(printf '%-1s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
LOADCPU=$(printf '%-0.00001s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
MODEL=$(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')
CORE=$(printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)")
DATEVPS=$(date +'%d/%m/%Y')
TIMEZONE=$(printf '%(%H:%M:%S)T')
SERONLINE=$(uptime -p | cut -d " " -f 2-10000)
NS=$( cat /etc/xray/dns )
clear
MYIP=$(curl -sS ipv4.icanhazip.com)
echo ""
#########################
# USERNAME
rm -f /usr/bin/user
username=$(curl -sS https://raw.githubusercontent.com/kytrx/regip/main/ip | grep $MYIP | awk '{print $2}')
echo "$username" >/usr/bin/user
# validity
rm -f /usr/bin/e
valid=$(curl -sS https://raw.githubusercontent.com/kytrx/regip/main/ip | grep $MYIP | awk '{print $3}')
echo "$valid" > /usr/bin/e
# DETAIL ORDER
username=$(cat /usr/bin/user)
oid=$(cat /usr/bin/ver)
exp=$(cat /usr/bin/e)
clear
# CERTIFICATE STATUS
d1=$(date -d "$valid" +%s)
d2=$(date -d "$today" +%s)
certifacate=$(((d1 - d2) / 86400))
# VPS Information
DATE=$(date +'%Y-%m-%d')
datediff() {
    d1=$(date -d "$1" +%s)
    d2=$(date -d "$2" +%s)
    echo -e "$COLOR1 $NC Expiry In   : $(( (d1 - d2) / 86400 )) Days"
}
mai="datediff "$Exp" "$DATE""

# Status ExpiRED Active | Yogz Project
Info="(${green}Active${NC})"
Error="(${r}Expired${NC})"
today=`date -d "0 days" +"%Y-%m-%d"`
Exp1=$(curl -sS https://raw.githubusercontent.com/kytrx/regip/main/ip | grep $MYIP | awk '{print $3}')
if [[ $today < $Exp1 ]]; then
sts="${Info}"
else
sts="${Error}"
fi
echo -e "\e[32mloading...\e[0m"
clear

# OS Uptime
uptime="$(uptime -p | cut -d " " -f 2-10)"

# Getting CPU Information | Yogz Project
cpu_usage1="$(ps aux | awk 'BEGIN {sum=0} {sum+=$3}; END {print sum}')"
cpu_usage="$((${cpu_usage1/\.*} / ${coREDiilik:-1}))"
cpu_usage+=" %"
WKT=$(curl -s ipinfo.io/timezone )
DAY=$(date +%A)
DATE=$(date +%m/%d/%Y)
DATE2=$(date -R | cut -d " " -f -5)
IPVPS=$(curl -s ipinfo.io/ip )
cname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo )
cores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo )
freq=$( awk -F: ' /cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo )
tram=$( free -m | awk 'NR==2 {print $2}' )
uram=$( free -m | awk 'NR==2 {print $3}' )
fram=$( free -m | awk 'NR==2 {print $4}' )
clear
ssh_service=$(/etc/init.d/ssh status | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
dropbear_service=$(/etc/init.d/dropbear status | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
haproxy_service=$(systemctl status haproxy | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
xray_service=$(systemctl status xray | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
nginx_service=$(systemctl status nginx | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
#Status | Yogz Project
clear
# STATUS SERVICE  SSH 
if [[ $ssh_service == "running" ]]; then 
   status_ssh="${green}ON${NC}"
else
   status_ssh="${RED}OFF${NC} "
fi

# // SSH Websocket Proxy
ssh_ws=$( systemctl status ws | grep Active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g' )
if [[ $ssh_ws == "running" ]]; then
    status_ws_epro="${green}ON${NC}"
else
    status_ws_epro="${RED}OFF${NC} "
fi

# STATUS SERVICE HAPROXY
if [[ $haproxy_service == "running" ]]; then 
   status_haproxy="${green}ON${NC}"
else
   status_haproxy="${RED}OFF${NC} "
fi

# STATUS SERVICE XRAY
if [[ $xray_service == "running" ]]; then 
   status_xray="${green}ON${NC}"
else
   status_xray="${RED}OFF${NC} "
fi

# STATUS SERVICE NGINX
if [[ $nginx_service == "running" ]]; then 
   status_nginx="${green}ON${NC}"
else
   status_nginx="${RED}OFF${NC} "
fi

# STATUS SERVICE Dropbear
if [[ $dropbear_service == "running" ]]; then 
   status_dropbear="${green}ON${NC}"
else
   status_dropbear="${RED}OFF${NC} "
fi
#####INFOAKUN
vlx=$(grep -c -E "^#& " "/etc/xray/config.json")
let vla=$vlx/2
vmc=$(grep -c -E "^### " "/etc/xray/config.json")
let vma=$vmc/2
ssh1="$(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd | wc -l)"
trx=$(grep -c -E "^#! " "/etc/xray/config.json")
let trb=$trx/2
ssx=$(grep -c -E "^#ss# " "/etc/xray/config.json")
let ssa=$ssx/2
###########
KANAN="\033[1;32m<\033[1;33m<\033[1;31m<\033[1;31m$NC"
KIRI="\033[1;32m>\033[1;33m>\033[1;31m>\033[1;31m$NC"
########
r="\033[1;31m"  #REDTERANG
a=" ${CYAN}MEMBER PREMIUM"
echo -e "   ${OR}──────────────────────────────────────${NC}"
echo -e "   ${grenbo}   .::::.$NC$gg  YOGZ TUNNELING  ${grenbo}.::::.${NC}"
echo -e "   ${OR}──────────────────────────────────────${NC}"
echo -e "       ${OR}┌───────────────────────────┐${NC}"
echo -e "       ${OR}│$NC$r SYS OS :$NC $MODEL${NC}"
echo -e "       ${OR}│$NC$r RAM :$NC $RAM MB/$USAGERAM MB$NC"
echo -e "       ${OR}│$NC$r UP :$NC $SERONLINE${NC}"
echo -e "       ${OR}│$NC$r CORE :$NC $CORE${NC}"
echo -e "       ${OR}│$NC$r ISP :$NC $ISP${NC}"
echo -e "       ${OR}│$NC$r CITY :$NC $CITY${NC}"
echo -e "       ${OR}│$NC$r IP :$NC $IPVPS${NC}"
echo -e "       ${OR}│$NC$r DOMAIN :$NC $domain${NC}"
echo -e "       ${OR}│$NC$r NS :$NC $NS${NC}"
echo -e "       ${OR}└───────────────────────────┘${NC}"
echo -e "  ${OR}┌──────────────────────────────────────┐${NC}"
echo -e "  ${OR}│$NC SSH-WS :$NC $status_ssh ${OR}│$NC XRAY :$NC $status_xray ${OR}│$NC NGINX :$NC $status_nginx ${OR}│${NC}"
echo -e "  ${OR}└──────────────────────────────────────┘${NC}"
echo -e "     ${OR}┌────────────────────────────────┐${NC}"
echo -e "     ${OR}│$NC ID :$NC$grenbo $username${NC}"
echo -e "     ${OR}│$NC Script :$NC $sts"
echo -e "     ${OR}│$NC Exp.sc :$NC$grenbo $certifacate Day.left${NC}"
echo -e "     ${OR}└────────────────────────────────┘${NC}"
echo -e "           SSH OVPN: $ssh1  VMESS: $vma $NC"
echo -e "       VLESS: $vla TROJAN: $trb SHADWSK: $ssa $NC"
echo -e "  ${OR}┌──────────────────────────────────────┐${NC}"
echo -e "  ${OR}│$NC${grenbo}  1.${NC}${c}SSH OVPN MANAGER$NC${grenbo} 4.${NC}${c}TROJAN MANAGER$NC"
echo -e "  ${OR}│$NC${grenbo}  2.${NC}${c}VMESS MANAGER$NC   ${grenbo} 5.${NC}${c}SHDWSK MANAGER$NC"
echo -e "  ${OR}│$NC${grenbo}  3.${NC}${c}VLESS MANAGER$NC   ${grenbo} 6.${NC}${c}OTHER SETTINGS$NC"
echo -e "  ${OR}└──────────────────────────────────────┘${NC}"
echo -e "             ${grenbo} Version : 3.0.0 ${NC}"
echo -e "          $purple━━━$NC$grenbo━━━$NC$white━━━$NC$g━━━$NC$r━━━$NC$y━━━$NC$Blue━━━$NC$c━━${NC}"
echo -e ""
read -p "      Select From Options [ 1 - 6 ] : " opt
echo -e ""
case $opt in
1 | 01)
clear
m-sshws
;;
2 | 02)
clear
m-vmess
;;
3 | 03)
clear
m-vless
;;
4 | 04)
clear
m-trojan
;;
5 | 05)
clear
m-ssws
;;
6 | 06)
clear
utility
;;
23)
clear
upsc
;;
99)
clear
add-ip
;;
0 | 00)
menu
;;
x)
clear
exit
;;
*)
exit
;;
esac
